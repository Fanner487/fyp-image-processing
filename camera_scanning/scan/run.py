#! /usr/bin/env python
#
# GUI module generated by PAGE version 4.11
# In conjunction with Tcl version 8.6
#    Mar 22, 2018 11:48:51 PM

import sys
import time
import threading
from threading import Timer
import time
from processing.qr import get_qr_code
from processing.ocr import get_date_time_from_screen
from processing.scan import scan_image
import cv2
import requests
import datetime
from pprint import pprint
from colorama import Fore, Back, Style
from colorama import init
from termcolor import colored
import winsound

try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

def update_display(message):
    displayVar.set(message + " ---- " + time.ctime())

def vp_start_gui():
    print "vp_start_gui"
    '''Starting point when module is the main routine.'''
    global val, w, root, top
    root = Tk()
    top = attendR (root)

    root.mainloop()


# View construction of the UI and messsage handling
class attendR:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85' 
        _ana2color = '#d9d9d9' # X11 color: 'gray85' 

        top.geometry("500x300+493+220")
        top.title("attendR")
        top.configure(background="#009688")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")



        self.text_box = Message(top)
        self.text_box.place(relx=0.24, rely=0.50, relheight=0.31, relwidth=0.52)
        self.text_box.configure(relief="flat")
        self.text_box.configure(borderwidth=5)
        self.text_box.configure(background="#ffffff")
        self.text_box.configure(foreground="#000000")
        self.text_box.configure(highlightbackground="black")
        self.text_box.configure(highlightcolor="black")
        self.text_box.configure(text='''Ready to scan''')
        self.text_box.configure(font=("arial", 12, "bold"))
        self.text_box.configure(width=260)

        img = PhotoImage(file="icon.gif")
        self.label = Label(top, image=img)
        self.label.image = img
        # self.label.place(relx=0.4, rely=0.16, height=21, width=34)
        self.label.place(relx=0.42, rely=0.10)

        self.label.configure(background="#ffffff")
        self.text_box.configure(relief="flat")
        self.text_box.configure(borderwidth=0)
        self.label.configure(disabledforeground="#a3a3a3")
        self.label.configure(foreground="#ffffff")

    def success_message(self, message):
        frequency = 2000  # Set Frequency To 2500 Hertz
        duration = 500  # Set Duration To 1000 ms == 1 second
        winsound.Beep(frequency, duration)
        global start_time
        start_time = time.time()
        self.text_box.configure(background="green")
        self.text_box.configure(text=message)

        timer = Timer(2.0, self.reset_message)
        timer.start()

    def error_message(self, message):
        frequency = 1500  # Set Frequency To 2500 Hertz
        duration = 500  # Set Duration To 1000 ms == 1 seconds
        winsound.Beep(frequency, duration)
        global start_time
        start_time = time.time()
        self.text_box.configure(background="red")
        self.text_box.configure(text=message)

        timer = Timer(2.0, top.reset_message)
        timer.start()
    
    def update_message(self, message):
        self.text_box.configure(text=message)
        # root.update()

    def reset_message(self):
        self.text_box.configure(background="white")
        self.text_box.configure(text="Ready to scan")


# Thread function
def extract_code_and_time(file):

    # if phone screen found, get QR code 
    # and time and date from OCR
    if scan_image(file):

        qr_code = get_qr_code(file)

        if qr_code:

            found, date_result, time_result = get_date_time_from_screen(file)

            if found:

                # print "\n\n\n"

                date = datetime.datetime.strptime(date_result, '%d/%m/%Y')
                new_date = datetime.date.strftime(date, '%Y-%m-%d')

                (username, event_id) = qr_code.split(" ")
                
                # Send attempt to server and await response
                r = requests.post('http://46.101.13.145:8000/api/attempts/', 
                data = {
                    'username' : username,
                    'event_id' : event_id,
                    'time_on_screen' : time_result,
                    'date_on_screen' : new_date
                })

                response = r.json()

                # When response returns 400 code  
                if 'non_field_errors' in response:

                    message = response['non_field_errors']

                    seconds = time.time() - start_time
                    print seconds

                    if seconds > 5:

                        # Give green light and message when message contains signed in
                        # Otherwise, give red light and error message
                        if "signed in" in message[0]:

                            # frequency = 2000  # Set Frequency To 2500 Hertz
                            # duration = 500  # Set Duration To 1000 ms == 1 second
                            # winsound.Beep(frequency, duration)
                            # global start_time
                            # start_time = time.time()
                            top.success_message(message[0] + "\n" + time.ctime())
                            # timer = Timer(2.0, top.reset_message)
                            # timer.start()
                            root.update()
                        else:
                            # frequency = 1500  # Set Frequency To 2500 Hertz
                            # duration = 500  # Set Duration To 1000 ms == 1 seconds
                            # winsound.Beep(frequency, duration)
                            # global start_time
                            # start_time = time.time()
                            top.error_message(message[0] + "\n" + time.ctime())
                            # timer = Timer(2.0, top.reset_message)
                            # timer.start()
                            root.update()
                            
                    print colored(message[0], 'green')
                    print Style.RESET_ALL

    return

def run_thread():

    counter = 0
    while True:

        time.sleep(1)

        time_epoch = str(int(time.time()))
        # image_path = "images/" + time_epoch + ".jpg"
        image_path = "images/" + str(counter) + ".jpg"

        (grabbed, image) = camera.read()

        cv2.imwrite(image_path, image)

        t = threading.Thread(target=extract_code_and_time, args=[str(counter)])
        t.start()

        counter += 1

def camera_thread():

    while True:
        ret, frame = camera.read()

        cv2.imshow("video", frame)

        # cv2.waitKey(0)

        if cv2.waitKey(1) & 0xFF == ord('q'):
            break

    camera.release()
    cv2.destoyAllWindows()



if __name__ == '__main__':

    global start_time
    start_time = time.time()
    print start_time

    camera = cv2.VideoCapture(0)
    camera.set(cv2.CAP_PROP_EXPOSURE, -2.0)

    init()

    # Run camera viewing and main logic on different threads 
    camera_thread = threading.Thread(target=camera_thread)
    camera_thread.daemon = True
    camera_thread.start()

    run_thread = threading.Thread(target=run_thread)
    run_thread.daemon = True
    run_thread.start()

    print "starting gui"
    vp_start_gui()

    print "ending gui"